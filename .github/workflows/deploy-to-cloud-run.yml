
name: Build and Deploy to Google Cloud Run

on:
  push:
    branches:
      - main # Or your default branch, e.g., master

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1 # The location of your Artifact Registry
  SERVICE_NAME: bookings # Replace with your Cloud Run service name
  ARTIFACT_REGISTRY_REPO: bookings-repo # Replace with your Artifact Registry repository name
  IMAGE_NAME: bookings-app # Replace with your desired image name

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # Required for Workload Identity Federation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }} # e.g., projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }} # e.g., my-service-account@my-project.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                       -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest .

      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.GAR_LOCATION }} # Ensure this is the region for your Cloud Run service
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          # Optional: To use environment variables stored as GitHub secrets
          # env_vars: |
          #   NODE_ENV=production
          #   API_KEY=${{ secrets.MY_API_KEY }}
          #   ANOTHER_VAR=some_value
          #
          # Optional: To allow unauthenticated access (make sure this is intended)
          # allow_unauthenticated: true
          #
          # Optional: Platform (managed is default, can be gke)
          # platform: managed
          #
          # For more complex configurations or if you prefer using a service.yaml:
          # You might use a gcloud command directly in a 'run' step instead of this action,
          # for example:
          # run: |
          #   gcloud run deploy ${{ env.SERVICE_NAME }} \
          #     --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          #     --region ${{ env.GAR_LOCATION }} \
          #     --platform managed \
          #     --allow-unauthenticated \ # Or configure IAM for authentication
          #     --project ${{ env.PROJECT_ID }}
          #     # Consider using the service.yaml definition for more complex configurations:
          #     # gcloud run services replace cloudrun-service.yaml --region ${{ env.GAR_LOCATION }} --project ${{ env.PROJECT_ID }}
          #     # (You would need to substitute variables in cloudrun-service.yaml or manage it separately)

      - name: Show Deployed URL
        run: echo "Deployed to: ${{ steps.deploy.outputs.url }}"

# How to set up GitHub Secrets:
# 1. GCP_PROJECT_ID: Your Google Cloud Project ID.
# 2. GCP_WORKLOAD_IDENTITY_PROVIDER: The full identifier of your Workload Identity Provider.
#    Format: projects/YOUR_PROJECT_NUMBER/locations/global/workloadIdentityPools/YOUR_POOL_ID/providers/YOUR_PROVIDER_ID
# 3. GCP_SERVICE_ACCOUNT: The email address of the Google Cloud Service Account that GitHub Actions will impersonate.
#    This service account needs roles like:
#    - Artifact Registry Writer (roles/artifactregistry.writer) - to push images
#    - Cloud Run Developer (roles/run.developer) - to deploy services
#    - Service Account User (roles/iam.serviceAccountUser) - to impersonate this service account
#
# Alternative (less secure, if Workload Identity Federation is not set up):
#    GCP_SA_KEY: The JSON key of a Google Cloud Service Account.
#    If using GCP_SA_KEY, change the 'Google Auth' step to:
#    - name: Google Auth
#      id: auth
#      uses: 'google-github-actions/auth@v2'
#      with:
#        credentials_json: '${{ secrets.GCP_SA_KEY }}'
#
# Before running:
# - Ensure Artifact Registry API is enabled in your GCP project.
# - Ensure Cloud Run API is enabled in your GCP project.
# - Create an Artifact Registry repository named (as per env vars) in the specified GAR_LOCATION.
# - Configure Workload Identity Federation between GitHub Actions and your GCP project, or create a service account with a key.
# - If using a service.yaml for deployment via gcloud commands, ensure it's correctly configured.
